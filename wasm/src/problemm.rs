pub fn generate(caseid: u64) -> Vec<(i32, i32, i32, i32)> {
    if caseid == 1 {
        return [
            (0, 86, 0, 0),
            (100, 88, 26, 98),
            (0, 0, 63, 84),
            (0, 0, 54, 0),
            (36, 60, 85, 38),
            (100, 0, 0, 100),
            (0, 44, 66, 88),
            (84, 32, 70, 98),
            (86, 50, 43, 62),
            (6, 20, 90, 0),
            (0, 0, 0, 86),
            (72, 0, 72, 72),
            (0, 0, 0, 98),
            (89, 0, 89, 0),
            (54, 54, 36, 18),
            (63, 35, 91, 7),
            (73, 68, 91, 65),
            (76, 20, 32, 30),
            (0, 0, 79, 79),
            (0, 0, 87, 0),
            (12, 84, 96, 96),
            (71, 58, 10, 65),
            (70, 70, 0, 0),
            (90, 0, 45, 90),
            (34, 8, 40, 76),
            (86, 0, 0, 0),
            (0, 95, 95, 0),
            (65, 68, 2, 58),
            (72, 64, 20, 16),
            (0, 64, 96, 0),
            (42, 62, 8, 28),
            (0, 0, 26, 26),
            (36, 78, 24, 54),
            (38, 63, 100, 97),
            (16, 68, 34, 52),
            (54, 90, 18, 90),
            (84, 84, 84, 98),
            (12, 84, 80, 52),
            (0, 90, 35, 74),
            (99, 99, 66, 0),
            (44, 28, 24, 94),
            (51, 99, 24, 63),
            (30, 75, 0, 0),
            (26, 39, 78, 91),
            (66, 33, 99, 66),
            (97, 94, 39, 27),
            (0, 68, 34, 68),
            (20, 24, 14, 28),
            (71, 51, 70, 88),
            (60, 68, 82, 16),
            (88, 44, 99, 0),
            (84, 6, 95, 65),
            (66, 51, 72, 23),
            (80, 68, 92, 52),
            (88, 0, 0, 22),
            (6, 24, 54, 24),
            (58, 29, 0, 87),
            (0, 66, 0, 0),
            (33, 99, 3, 84),
            (92, 0, 46, 92),
            (82, 82, 0, 0),
            (38, 95, 95, 57),
            (0, 84, 16, 16),
            (80, 16, 80, 32),
            (10, 20, 50, 100),
            (0, 0, 58, 58),
            (52, 26, 65, 0),
            (0, 37, 37, 0),
            (96, 84, 64, 32),
            (42, 35, 98, 84),
            (98, 42, 56, 0),
            (100, 84, 98, 38),
            (88, 44, 88, 44),
            (44, 0, 0, 22),
            (0, 71, 71, 0),
            (55, 89, 49, 61),
            (11, 24, 85, 22),
            (2, 17, 99, 45),
            (66, 33, 55, 0),
            (0, 0, 0, 49),
            (0, 0, 0, 60),
            (40, 40, 80, 0),
            (35, 6, 93, 91),
            (46, 69, 23, 0),
            (96, 27, 27, 15),
            (0, 78, 0, 0),
            (55, 11, 44, 66),
            (45, 0, 0, 45),
            (94, 0, 47, 94),
            (72, 12, 12, 64),
            (70, 70, 35, 35),
            (24, 39, 6, 15),
            (0, 93, 93, 93),
            (28, 80, 4, 68),
            (54, 0, 0, 54),
            (0, 0, 0, 0),
        ]
        .to_vec();
    }
    if caseid == 2 {
        return [
            (81, 36, 60, 3),
            (27, 66, 69, 34),
            (18, 12, 42, 42),
            (0, 0, 84, 0),
            (4, 9, 29, 3),
            (0, 94, 47, 94),
            (52, 75, 67, 64),
            (0, 54, 54, 0),
            (29, 87, 58, 58),
            (66, 39, 83, 100),
            (0, 0, 65, 0),
            (27, 79, 62, 50),
            (0, 0, 0, 85),
            (12, 90, 24, 60),
            (81, 79, 30, 3),
            (72, 0, 0, 72),
            (0, 56, 0, 56),
            (17, 34, 51, 85),
            (0, 88, 88, 44),
            (39, 39, 78, 39),
            (0, 0, 87, 0),
            (60, 27, 17, 32),
            (84, 56, 98, 42),
            (26, 48, 72, 88),
            (18, 92, 11, 65),
            (78, 33, 33, 57),
            (86, 86, 0, 0),
            (90, 90, 0, 90),
            (37, 37, 74, 0),
            (27, 45, 82, 11),
            (55, 0, 55, 0),
            (92, 69, 46, 69),
            (26, 26, 78, 0),
            (44, 22, 0, 88),
            (0, 59, 59, 0),
            (78, 48, 17, 98),
            (50, 0, 50, 65),
            (0, 0, 0, 81),
            (42, 63, 7, 82),
            (72, 0, 0, 0),
            (2, 17, 13, 63),
            (93, 31, 56, 32),
            (49, 62, 19, 86),
            (49, 16, 57, 41),
            (98, 28, 50, 48),
            (71, 28, 50, 9),
            (0, 74, 37, 37),
            (61, 60, 20, 91),
            (0, 30, 90, 30),
            (48, 90, 78, 90),
            (52, 88, 81, 15),
            (76, 68, 0, 80),
            (24, 11, 23, 17),
            (15, 89, 19, 73),
            (25, 55, 95, 65),
            (0, 84, 0, 0),
            (52, 65, 65, 13),
            (12, 33, 9, 18),
            (91, 91, 91, 91),
            (61, 52, 73, 89),
            (0, 56, 56, 0),
            (100, 100, 0, 80),
            (51, 39, 48, 96),
            (30, 85, 93, 50),
            (0, 100, 60, 0),
            (56, 0, 56, 0),
            (87, 0, 87, 0),
            (39, 82, 6, 79),
            (81, 96, 78, 12),
            (0, 60, 0, 60),
            (88, 27, 65, 53),
            (90, 18, 72, 18),
            (33, 88, 22, 44),
            (0, 78, 78, 0),
            (0, 0, 0, 58),
            (54, 28, 54, 78),
            (29, 3, 93, 68),
            (56, 0, 56, 56),
            (60, 60, 0, 60),
            (22, 87, 33, 64),
            (0, 0, 0, 68),
            (42, 2, 11, 52),
            (95, 38, 38, 95),
            (0, 15, 80, 20),
            (6, 64, 32, 35),
            (72, 90, 0, 36),
            (60, 96, 96, 30),
            (32, 64, 0, 0),
            (92, 0, 92, 46),
            (27, 27, 0, 81),
            (90, 72, 9, 90),
            (34, 68, 34, 34),
            (16, 66, 54, 62),
            (60, 36, 72, 44),
            (88, 1, 49, 83),
            (0, 0, 0, 0),
        ]
        .to_vec();
    }
    if caseid == 3 {
        return [
            (72, 54, 96, 48),
            (60, 30, 84, 12),
            (37, 0, 37, 37),
            (55, 8, 98, 71),
            (0, 0, 44, 0),
            (18, 66, 96, 78),
            (0, 0, 60, 60),
            (31, 78, 98, 56),
            (72, 63, 99, 81),
            (11, 44, 88, 66),
            (19, 4, 98, 85),
            (21, 96, 69, 36),
            (38, 8, 84, 28),
            (42, 70, 91, 28),
            (99, 90, 18, 81),
            (80, 60, 50, 40),
            (36, 71, 51, 64),
            (69, 69, 0, 0),
            (76, 76, 76, 38),
            (47, 0, 94, 94),
            (54, 0, 0, 0),
            (0, 0, 90, 90),
            (10, 80, 60, 100),
            (0, 61, 0, 0),
            (56, 70, 28, 84),
            (15, 51, 21, 39),
            (75, 40, 11, 62),
            (0, 79, 79, 0),
            (60, 72, 76, 4),
            (11, 33, 55, 55),
            (66, 57, 99, 96),
            (46, 46, 46, 46),
            (44, 62, 82, 32),
            (21, 99, 62, 28),
            (40, 0, 56, 64),
            (70, 70, 70, 84),
            (19, 2, 81, 36),
            (63, 41, 99, 48),
            (77, 0, 77, 77),
            (81, 81, 0, 0),
            (32, 46, 20, 86),
            (30, 24, 12, 96),
            (100, 0, 100, 50),
            (10, 40, 88, 78),
            (28, 43, 55, 36),
            (21, 63, 63, 21),
            (48, 48, 24, 0),
            (30, 26, 62, 56),
            (68, 68, 0, 34),
            (87, 60, 48, 42),
            (70, 70, 10, 100),
            (87, 0, 87, 0),
            (100, 44, 96, 19),
            (59, 45, 56, 90),
            (0, 44, 0, 88),
            (60, 60, 60, 0),
            (0, 44, 88, 0),
            (78, 39, 78, 78),
            (0, 40, 40, 80),
            (98, 11, 74, 70),
            (75, 30, 55, 70),
            (51, 66, 46, 20),
            (48, 72, 13, 80),
            (47, 47, 0, 0),
            (9, 60, 66, 54),
            (64, 0, 64, 64),
            (32, 8, 24, 16),
            (48, 0, 96, 96),
            (20, 78, 66, 86),
            (78, 0, 78, 52),
            (0, 0, 0, 27),
            (55, 55, 0, 55),
            (95, 95, 95, 0),
            (88, 0, 66, 77),
            (45, 15, 30, 60),
            (0, 88, 88, 44),
            (54, 54, 72, 36),
            (27, 54, 0, 0),
            (0, 99, 99, 99),
            (42, 21, 0, 35),
            (22, 11, 77, 22),
            (26, 13, 52, 78),
            (19, 18, 17, 21),
            (37, 0, 0, 74),
            (40, 10, 90, 0),
            (25, 34, 1, 32),
            (36, 88, 72, 16),
            (0, 88, 44, 88),
            (54, 45, 27, 63),
            (97, 0, 97, 97),
            (39, 0, 39, 0),
            (41, 82, 41, 82),
            (14, 70, 0, 0),
            (82, 0, 82, 0),
            (94, 34, 20, 60),
            (0, 0, 0, 0),
        ]
        .to_vec();
    }
    if caseid == 4 {
        return [
            (54, 4, 28, 18),
            (81, 0, 27, 81),
            (3, 46, 54, 68),
            (82, 0, 82, 41),
            (26, 15, 46, 24),
            (18, 81, 9, 27),
            (48, 12, 48, 96),
            (32, 53, 99, 86),
            (17, 85, 17, 0),
            (12, 48, 78, 12),
            (91, 0, 7, 77),
            (0, 26, 10, 74),
            (70, 70, 0, 70),
            (0, 39, 78, 0),
            (53, 96, 31, 10),
            (58, 58, 87, 0),
            (94, 0, 0, 0),
            (75, 75, 45, 15),
            (4, 29, 90, 12),
            (25, 26, 93, 91),
            (28, 0, 0, 84),
            (80, 20, 85, 10),
            (65, 0, 65, 0),
            (54, 27, 81, 27),
            (64, 0, 0, 0),
            (44, 0, 84, 96),
            (27, 3, 26, 96),
            (72, 72, 84, 36),
            (0, 0, 0, 95),
            (87, 83, 16, 20),
            (86, 0, 0, 86),
            (0, 0, 96, 96),
            (44, 88, 44, 22),
            (0, 39, 0, 78),
            (92, 46, 92, 92),
            (61, 0, 0, 61),
            (70, 84, 98, 14),
            (0, 0, 0, 85),
            (90, 26, 78, 60),
            (0, 0, 40, 56),
            (88, 24, 72, 56),
            (27, 45, 27, 63),
            (72, 64, 88, 8),
            (36, 36, 36, 0),
            (59, 47, 8, 88),
            (45, 0, 75, 90),
            (3, 30, 13, 16),
            (9, 27, 36, 99),
            (70, 15, 85, 50),
            (4, 31, 72, 84),
            (0, 63, 0, 63),
            (97, 97, 0, 97),
            (72, 0, 0, 0),
            (53, 53, 0, 0),
            (0, 80, 80, 0),
            (0, 33, 44, 55),
            (17, 82, 33, 29),
            (90, 36, 14, 96),
            (0, 0, 72, 36),
            (75, 78, 54, 6),
            (0, 0, 32, 32),
            (85, 85, 85, 85),
            (0, 43, 0, 0),
            (89, 40, 31, 14),
            (79, 79, 0, 79),
            (32, 24, 56, 56),
            (61, 0, 0, 0),
            (100, 46, 6, 36),
            (60, 60, 0, 30),
            (75, 48, 98, 8),
            (42, 0, 21, 84),
            (87, 0, 29, 87),
            (56, 16, 56, 80),
            (0, 45, 45, 0),
            (96, 96, 96, 96),
            (10, 85, 45, 30),
            (0, 0, 76, 76),
            (0, 0, 0, 74),
            (15, 13, 24, 6),
            (15, 96, 96, 90),
            (97, 0, 97, 97),
            (86, 0, 0, 86),
            (55, 66, 44, 88),
            (0, 86, 86, 0),
            (59, 59, 0, 59),
            (0, 43, 86, 86),
            (1, 58, 28, 89),
            (0, 50, 65, 30),
            (97, 8, 51, 3),
            (52, 52, 52, 52),
            (95, 69, 96, 31),
            (98, 56, 84, 0),
            (45, 30, 75, 60),
            (96, 32, 32, 32),
            (0, 88, 88, 66),
            (0, 0, 0, 0),
        ]
        .to_vec();
    }
    panic!("Invalid testid");
}

fn gcd(a: i32, b: i32) -> i32 {
    if b == 0 {
        a
    } else {
        gcd(b, a % b)
    }
}

fn modelans(testcase: &Vec<(i32, i32, i32, i32)>) -> Vec<i32> {
    let mut ret = Vec::new();
    for (a, b, c, d) in testcase {
        if *a == 0 && *b == 0 && *c == 0 && *d == 0 {
            break;
        }
        let mut ans = gcd(*a, *b);
        ans = gcd(ans, *c);
        ans = gcd(ans, *d);
        ret.push(ans);
    }
    ret
}

pub fn validate(testid: u64, ans: &str) -> bool {
    let testcase = generate(testid);
    let modelans = modelans(&testcase);
    let mut vans = Vec::new();
    for line in ans.lines() {
        vans.push(line.parse::<i32>().unwrap());
    }
    vans == modelans
}
